name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
  workflow_dispatch:

# SECURITY: Minimal permissions for CI operations
permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '20'

jobs:
  validate:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git Bot
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run typecheck

      - name: Security audit
        run: |
          echo "üîç Running security audit..."
          npm audit --audit-level=moderate
          
          echo "üîç Checking for banned dependencies..."
          if npm ls | grep -E "(xlsx)" >/dev/null 2>&1; then
            echo "‚ùå Found banned dependencies (xlsx)"
            exit 1
          fi
          
          echo "‚úÖ Security audit passed"

  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git Bot
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Build project
        run: npm run build

      - name: Test installation
        run: npm run test:installation

  build-test:
    name: Build & Test Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git Bot
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build:clean

      - name: Test offline package creation
        run: |
          echo "üì¶ Testing offline package creation..."
          npm run pack:offline
          
          # Verify package was created
          if ls datapilot-cli-*.tgz >/dev/null 2>&1; then
            echo "‚úÖ Offline package created successfully"
            ls -la datapilot-cli-*.tgz
          else
            echo "‚ùå Offline package creation failed"
            exit 1
          fi

      - name: Test binary creation (Node.js SEA)
        run: |
          echo "üî® Testing binary creation with Node.js Single Executable Applications..."
          
          node scripts/build-sea.js linux
          
          chmod +x binaries/datapilot-linux
          ./binaries/datapilot-linux --version
          
          echo "‚úÖ Binary creation test passed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-test-artifacts
          path: |
            dist/
            datapilot-cli-*.tgz
            test-binary
          retention-days: 7

  windows-specific:
    name: Windows Enterprise Test
    runs-on: windows-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git Bot
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Test Windows installation script
        shell: cmd
        run: |
          echo Testing Windows-optimized npm configuration...
          
          REM Copy .npmrc to test location
          copy .npmrc test-npmrc
          
          REM Test npm configuration
          npm config list
          
          echo Windows configuration test passed

      - name: Install dependencies
        run: npm ci

      - name: Test build on Windows
        run: npm run build

      - name: Test Windows executable creation
        run: |
          node scripts/build-sea.js win
          
          .\binaries\datapilot-win.exe --version

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [validate, test, build-test, windows-specific]
    if: always()
    
    steps:
      - name: CI Status Summary
        run: |
          echo "üéØ CI Pipeline Summary"
          echo "====================="
          
          if [[ "${{ needs.validate.result }}" == "success" ]]; then
            echo "‚úÖ Code Quality & Security: Passed"
          else
            echo "‚ùå Code Quality & Security: Failed"
          fi
          
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "‚úÖ Cross-platform Tests: Passed"
          else
            echo "‚ùå Cross-platform Tests: Failed"
          fi
          
          if [[ "${{ needs.build-test.result }}" == "success" ]]; then
            echo "‚úÖ Build & Package Test: Passed"
          else
            echo "‚ùå Build & Package Test: Failed"
          fi
          
          if [[ "${{ needs.windows-specific.result }}" == "success" ]]; then
            echo "‚úÖ Windows Enterprise Test: Passed"
          else
            echo "‚ùå Windows Enterprise Test: Failed"
          fi
          
          echo ""
          echo "üîí Security Status: All vulnerabilities fixed"
          echo "üè¢ Enterprise Ready: Windows installation optimized"
          echo "üì¶ Package Quality: Offline installation supported"

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [validate, test, build-test, windows-specific]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build:clean

      - name: Run semantic release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}