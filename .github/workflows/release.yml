name: Release Pre-built Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v1.4.0)'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  build-packages:
    name: Build Pre-built Packages
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.release.tag_name || github.event.inputs.tag }}
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build:clean
      
    - name: Create pre-built npm package
      run: |
        echo "ðŸ“¦ Creating pre-built npm package..."
        
        # Run the offline package script
        npm run pack:offline
        
        # Get the package filename
        PACKAGE_FILE=$(ls -1 datapilot-cli-*.tgz | head -1)
        echo "Package created: $PACKAGE_FILE"
        
        # Rename for clarity
        VERSION=${{ github.event.release.tag_name || github.event.inputs.tag }}
        mv "$PACKAGE_FILE" "datapilot-cli-${VERSION}-prebuilt.tgz"
        
    - name: Create Windows-specific package
      run: |
        echo "ðŸªŸ Creating Windows-optimized package..."
        
        # Create Windows .npmrc
        cat > .npmrc << 'EOF'
        # Windows-optimized npm settings
        audit=false
        fund=false
        save-exact=true
        package-lock=false
        EOF
        
        # Pack again with Windows settings
        npm pack
        
        # Rename
        VERSION=${{ github.event.release.tag_name || github.event.inputs.tag }}
        PACKAGE_FILE=$(ls -1 datapilot-cli-*.tgz | grep -v prebuilt | head -1)
        mv "$PACKAGE_FILE" "datapilot-cli-${VERSION}-windows.tgz"
        
    - name: Upload release assets
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          datapilot-cli-*-prebuilt.tgz
          datapilot-cli-*-windows.tgz
          OFFLINE_INSTALL.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: prebuilt-packages
        path: |
          datapilot-cli-*-prebuilt.tgz
          datapilot-cli-*-windows.tgz
          OFFLINE_INSTALL.md
        retention-days: 30

  build-binaries:
    name: Build Platform Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            extension: ''
            target: 'node18-linux-x64'
          - os: windows-latest
            platform: windows
            extension: '.exe'
            target: 'node18-win-x64'
          - os: macos-latest
            platform: macos
            extension: ''
            target: 'node18-macos-x64'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.release.tag_name || github.event.inputs.tag }}
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Install pkg
      run: npm install -g pkg
      
    - name: Build binary
      run: |
        VERSION=${{ github.event.release.tag_name || github.event.inputs.tag }}
        pkg . --targets ${{ matrix.target }} --output datapilot-${{ matrix.platform }}-${VERSION}${{ matrix.extension }}
        
    - name: Test binary (Unix)
      if: runner.os != 'Windows'
      run: |
        chmod +x datapilot-${{ matrix.platform }}-*
        ./datapilot-${{ matrix.platform }}-* --version
        
    - name: Test binary (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        datapilot-windows-*.exe --version
        
    - name: Create platform package
      run: |
        VERSION=${{ github.event.release.tag_name || github.event.inputs.tag }}
        mkdir -p release-package
        
        # Copy binary
        cp datapilot-${{ matrix.platform }}-* release-package/
        
        # Create README
        cat > release-package/README.md << 'EOF'
        # DataPilot - ${{ matrix.platform }}

        ## Installation

        This is a standalone executable - no Node.js required!

        ### ${{ matrix.platform }}
        
        1. Download the binary
        2. Make it executable (Unix only): `chmod +x datapilot-${{ matrix.platform }}-*`
        3. Move to your PATH or run directly: `./datapilot-${{ matrix.platform }}-* --help`

        ### Windows specific:
        - You may need to allow the executable in Windows Defender
        - Run from Command Prompt or PowerShell
        - Add to PATH for global access

        ## Usage

        ```bash
        datapilot-${{ matrix.platform }}-* --version
        datapilot-${{ matrix.platform }}-* all data.csv
        ```
        EOF
        
        # Create archive
        if [ "${{ runner.os }}" = "Windows" ]; then
          7z a -tzip datapilot-${{ matrix.platform }}-${VERSION}.zip release-package/*
        else
          tar -czf datapilot-${{ matrix.platform }}-${VERSION}.tar.gz -C release-package .
        fi
        
    - name: Upload release assets
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          datapilot-${{ matrix.platform }}-*${{ matrix.extension }}
          datapilot-${{ matrix.platform }}-*.zip
          datapilot-${{ matrix.platform }}-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.platform }}
        path: |
          datapilot-${{ matrix.platform }}-*${{ matrix.extension }}
          datapilot-${{ matrix.platform }}-*.zip
          datapilot-${{ matrix.platform }}-*.tar.gz
        retention-days: 30

  create-offline-installer:
    name: Create Offline Installer Bundle
    needs: [build-packages, build-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.release.tag_name || github.event.inputs.tag }}
        
    - name: Download all artifacts
      if: github.event_name == 'workflow_dispatch'
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts/
        
    - name: Create enterprise bundle
      run: |
        VERSION=${{ github.event.release.tag_name || github.event.inputs.tag }}
        mkdir -p enterprise-bundle
        
        # Download release assets if this is a release
        if [ "${{ github.event_name }}" = "release" ]; then
          echo "Downloading release assets..."
          gh release download ${VERSION} --dir enterprise-bundle || true
        else
          # Copy artifacts from workflow dispatch
          find ./artifacts -type f \( -name "*.tgz" -o -name "*.exe" -o -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} enterprise-bundle/ \;
        fi
        
        # Create comprehensive installation guide
        cat > enterprise-bundle/ENTERPRISE_INSTALL.md << 'EOF'
        # DataPilot Enterprise Installation Guide

        Version: ${VERSION}

        ## Package Contents

        - `datapilot-cli-*-prebuilt.tgz` - Pre-built npm package with all dependencies
        - `datapilot-cli-*-windows.tgz` - Windows-optimized npm package
        - `datapilot-windows-*.exe` - Windows standalone executable
        - `datapilot-linux-*` - Linux standalone executable
        - `datapilot-macos-*` - macOS standalone executable

        ## Installation Options

        ### Option 1: Standalone Executable (No Node.js Required)

        #### Windows
        1. Download `datapilot-windows-*.exe`
        2. Place in desired directory
        3. Add directory to PATH or run directly
        4. May need to allow in Windows Defender

        #### Linux/macOS
        1. Download appropriate binary
        2. Make executable: `chmod +x datapilot-*`
        3. Move to `/usr/local/bin` or add to PATH

        ### Option 2: Pre-built NPM Package (Node.js Required)

        #### Standard Installation
        ```bash
        npm install -g datapilot-cli-*-prebuilt.tgz
        ```

        #### Windows-Specific Installation
        ```bash
        npm install -g datapilot-cli-*-windows.tgz --unsafe-perm
        ```

        ### Option 3: Offline Corporate Environment

        1. Copy the appropriate `.tgz` file to your internal registry
        2. Configure npm to use your internal registry
        3. Install normally: `npm install -g datapilot-cli`

        ## Verification

        After installation, verify with:
        ```bash
        datapilot --version
        datapilot --help
        ```

        ## Troubleshooting

        ### Windows Issues
        - Run as Administrator for global installs
        - Use `--unsafe-perm` flag if permission errors
        - Check Windows Defender if executable is blocked

        ### Proxy Configuration
        ```bash
        npm config set proxy http://proxy.company.com:8080
        npm config set https-proxy http://proxy.company.com:8080
        ```

        ### Large File Support
        DataPilot uses streaming for memory efficiency.
        No special configuration needed for large files.

        ## Support

        - Documentation: https://github.com/Mrassimo/datapilot
        - Issues: https://github.com/Mrassimo/datapilot/issues
        EOF
        
        # Create archive of all assets
        tar -czf datapilot-enterprise-bundle-${VERSION}.tar.gz -C enterprise-bundle .
        
    - name: Upload enterprise bundle
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          datapilot-enterprise-bundle-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: enterprise-bundle
        path: |
          datapilot-enterprise-bundle-*.tar.gz
          enterprise-bundle/ENTERPRISE_INSTALL.md
        retention-days: 30